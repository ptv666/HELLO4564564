%% 顺便求一下吧

%% 最上面没必要求了
z <= -0.28
%% 最底面前侧（+y）
clear
theta1 = -35/180*pi;
theta2 = 0/180*pi;
theta3 = 35/180*pi;
x = [0 0.65*cos(theta1) 0.65*cos(theta2) 0];  % 定义等边三角形每个角的x坐标
y = [0 0.65*sin(theta1) 0.65*sin(theta2) 0];  % 定义等边三角形每个角的y坐标
z = [-0.95 -0.87 -0.87 -0.95];  % 定义等边三角形每个角的y坐标
p1 = [x(1),y(1),z(1)];
p2 = [x(2),y(2),z(2)];
p3 = [x(3),y(3),z(3)];

a = (p2(2) - p1(2))*(p3(3) - p1(3)) - (p2(3) - p1(3))*(p3(2) - p1(2));
b = (p2(3) - p1(3))*(p3(1) - p1(1)) - (p2(1) - p1(1))*(p3(3) - p1(3));
c = (p2(1) - p1(1))*(p3(2) - p1(2)) - (p2(2) - p1(2))*(p3(1) - p1(1));
d = 0 - (a * p1(1) + b*p1(2) + c*p1(3));
sprintf('最底面前侧（+y）')
[[a,b,c] * p1' + d ,[a,b,c] * p2' + d, [a,b,c] * p3' + d]
[a,b,c,d]
%% 最底面后侧（-y）
clear
theta1 = -35/180*pi;
theta2 = 0/180*pi;
theta3 = 35/180*pi;
x = [0 0.65*cos(theta2) 0.65*cos(theta3) 0];  % 定义等边三角形每个角的x坐标
y = [0 0.65*sin(theta2) 0.65*sin(theta3) 0];  % 定义等边三角形每个角的y坐标
z = [-0.95 -0.87 -0.87 -0.95];  % 定义等边三角形每个角的y坐标
p1 = [x(1),y(1),z(1)];
p2 = [x(2),y(2),z(2)];
p3 = [x(3),y(3),z(3)];

a = (p2(2) - p1(2))*(p3(3) - p1(3)) - (p2(3) - p1(3))*(p3(2) - p1(2));
b = (p2(3) - p1(3))*(p3(1) - p1(1)) - (p2(1) - p1(1))*(p3(3) - p1(3));
c = (p2(1) - p1(1))*(p3(2) - p1(2)) - (p2(2) - p1(2))*(p3(1) - p1(1));
d = 0 - (a * p1(1) + b*p1(2) + c*p1(3));
sprintf('最底面后侧（-y）')
[[a,b,c] * p1' + d ,[a,b,c] * p2' + d, [a,b,c] * p3' + d]
[a,b,c,d]
%% 第一个面
clear
theta = 35/180*pi;
x = [0 1.14*cos(theta) 0.65*cos(theta) 0 0];  % 定义等边三角形每个角的x坐标
y = [0 1.14*sin(theta) 0.65*sin(theta) 0 0];  % 定义等边三角形每个角的y坐标
z = [-0.28 -0.28 -0.87 -0.95 -0.28];  % 定义等边三角形每个角的y坐标
p1 = [x(1),y(1),z(1)];
p2 = [x(2),y(2),z(2)];
p3 = [x(3),y(3),z(3)];
p4 = [x(4),y(4),z(4)];
a = (p2(2) - p1(2))*(p3(3) - p1(3)) - (p2(3) - p1(3))*(p3(2) - p1(2));
b = (p2(3) - p1(3))*(p3(1) - p1(1)) - (p2(1) - p1(1))*(p3(3) - p1(3));
c = (p2(1) - p1(1))*(p3(2) - p1(2)) - (p2(2) - p1(2))*(p3(1) - p1(1));
d = 0 - (a * p1(1) + b*p1(2) + c*p1(3));
sprintf('第一个面')
[[a,b,c] * p1' + d ,[a,b,c] * p2' + d, [a,b,c] * p3' + d, [a,b,c] * p4' + d]
[a,b,c,d]
%% 第二个面
clear
theta1 = 35/180*pi;
theta2 = 0/180*pi;
x = [1.14*cos(theta1) 1.14*cos(theta2) 0.65*cos(theta2) 0.65*cos(theta1) 1.14*cos(theta1)];  % 定义等边三角形每个角的x坐标
y = [1.14*sin(theta1) 1.14*sin(theta2) 0.65*sin(theta2) 0.65*sin(theta1) 1.14*sin(theta1)];  % 定义等边三角形每个角的y坐标
z = [-0.28 -0.28 -0.87 -0.87 -0.28];  % 定义等边三角形每个角的y坐标
p1 = [x(1),y(1),z(1)];
p2 = [x(2),y(2),z(2)];
p3 = [x(3),y(3),z(3)];
p4 = [x(4),y(4),z(4)];
a = (p2(2) - p1(2))*(p3(3) - p1(3)) - (p2(3) - p1(3))*(p3(2) - p1(2));
b = (p2(3) - p1(3))*(p3(1) - p1(1)) - (p2(1) - p1(1))*(p3(3) - p1(3));
c = (p2(1) - p1(1))*(p3(2) - p1(2)) - (p2(2) - p1(2))*(p3(1) - p1(1));
d = 0 - (a * p1(1) + b*p1(2) + c*p1(3));
sprintf('第二个面')
[[a,b,c] * p1' + d ,[a,b,c] * p2' + d, [a,b,c] * p3' + d, [a,b,c] * p4' + d]
[a,b,c,d]
%% 第三个面
clear
theta = -35/180*pi
x = [0 1.14*cos(theta) 0.65*cos(theta) 0 0];  % 定义等边三角形每个角的x坐标
y = [0 1.14*sin(theta) 0.65*sin(theta) 0 0];  % 定义等边三角形每个角的y坐标
z = [-0.28 -0.28 -0.87 -0.95 -0.28];  % 定义等边三角形每个角的y坐标
p1 = [x(1),y(1),z(1)];
p2 = [x(2),y(2),z(2)];
p3 = [x(3),y(3),z(3)];
p4 = [x(4),y(4),z(4)];
a = (p2(2) - p1(2))*(p3(3) - p1(3)) - (p2(3) - p1(3))*(p3(2) - p1(2));
b = (p2(3) - p1(3))*(p3(1) - p1(1)) - (p2(1) - p1(1))*(p3(3) - p1(3));
c = (p2(1) - p1(1))*(p3(2) - p1(2)) - (p2(2) - p1(2))*(p3(1) - p1(1));
d = 0 - (a * p1(1) + b*p1(2) + c*p1(3));
sprintf('第三个面')
[[a,b,c] * p1' + d ,[a,b,c] * p2' + d, [a,b,c] * p3' + d, [a,b,c] * p4' + d]
[a,b,c,d]
%% 第四个面
clear
theta1 = -35/180*pi
theta2 = 0/180*pi
x = [1.14*cos(theta1) 1.14*cos(theta2) 0.65*cos(theta2) 0.65*cos(theta1) 1.14*cos(theta1)];  % 定义等边三角形每个角的x坐标
y = [1.14*sin(theta1) 1.14*sin(theta2) 0.65*sin(theta2) 0.65*sin(theta1) 1.14*sin(theta1)];  % 定义等边三角形每个角的y坐标
z = [-0.28 -0.28 -0.87 -0.87 -0.28];  % 定义等边三角形每个角的y坐标
p1 = [x(1),y(1),z(1)];
p2 = [x(2),y(2),z(2)];
p3 = [x(3),y(3),z(3)];
p4 = [x(4),y(4),z(4)];
a = (p2(2) - p1(2))*(p3(3) - p1(3)) - (p2(3) - p1(3))*(p3(2) - p1(2));
b = (p2(3) - p1(3))*(p3(1) - p1(1)) - (p2(1) - p1(1))*(p3(3) - p1(3));
c = (p2(1) - p1(1))*(p3(2) - p1(2)) - (p2(2) - p1(2))*(p3(1) - p1(1));
d = 0 - (a * p1(1) + b*p1(2) + c*p1(3));
sprintf('第四个面')
[[a,b,c] * p1' + d ,[a,b,c] * p2' + d, [a,b,c] * p3' + d, [a,b,c] * p4' + d]
[a,b,c,d]