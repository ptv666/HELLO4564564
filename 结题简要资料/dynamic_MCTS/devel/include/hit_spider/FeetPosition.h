// Generated by gencpp from file hit_spider/FeetPosition.msg
// DO NOT EDIT!


#ifndef HIT_SPIDER_MESSAGE_FEETPOSITION_H
#define HIT_SPIDER_MESSAGE_FEETPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace hit_spider
{
template <class ContainerAllocator>
struct FeetPosition_
{
  typedef FeetPosition_<ContainerAllocator> Type;

  FeetPosition_()
    : foot()  {
    }
  FeetPosition_(const ContainerAllocator& _alloc)
    : foot()  {
  (void)_alloc;
      foot.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 6>  _foot_type;
  _foot_type foot;





  typedef boost::shared_ptr< ::hit_spider::FeetPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hit_spider::FeetPosition_<ContainerAllocator> const> ConstPtr;

}; // struct FeetPosition_

typedef ::hit_spider::FeetPosition_<std::allocator<void> > FeetPosition;

typedef boost::shared_ptr< ::hit_spider::FeetPosition > FeetPositionPtr;
typedef boost::shared_ptr< ::hit_spider::FeetPosition const> FeetPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hit_spider::FeetPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hit_spider::FeetPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hit_spider::FeetPosition_<ContainerAllocator1> & lhs, const ::hit_spider::FeetPosition_<ContainerAllocator2> & rhs)
{
  return lhs.foot == rhs.foot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hit_spider::FeetPosition_<ContainerAllocator1> & lhs, const ::hit_spider::FeetPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hit_spider

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hit_spider::FeetPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hit_spider::FeetPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hit_spider::FeetPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hit_spider::FeetPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hit_spider::FeetPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hit_spider::FeetPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hit_spider::FeetPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4048f7be9c3b6e5d7ee12bb6c2d1d8e4";
  }

  static const char* value(const ::hit_spider::FeetPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4048f7be9c3b6e5dULL;
  static const uint64_t static_value2 = 0x7ee12bb6c2d1d8e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::hit_spider::FeetPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hit_spider/FeetPosition";
  }

  static const char* value(const ::hit_spider::FeetPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hit_spider::FeetPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[6] foot\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hit_spider::FeetPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hit_spider::FeetPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.foot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeetPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hit_spider::FeetPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hit_spider::FeetPosition_<ContainerAllocator>& v)
  {
    s << indent << "foot[]" << std::endl;
    for (size_t i = 0; i < v.foot.size(); ++i)
    {
      s << indent << "  foot[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.foot[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIT_SPIDER_MESSAGE_FEETPOSITION_H
