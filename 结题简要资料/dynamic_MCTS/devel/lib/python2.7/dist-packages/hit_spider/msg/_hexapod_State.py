# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hit_spider/hexapod_State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hit_spider.msg
import std_msgs.msg

class hexapod_State(genpy.Message):
  _md5sum = "c1c5c5e8f9a08bf09da5670b143ed75d"
  _type = "hit_spider/hexapod_State"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#当前机器人状态
hit_spider/hexapod_Base_Pose base_Pose_Now
int8[6] support_State_Now
int8[6] faultLeg_State_Now
hit_spider/FeetPosition feetPositionNow

#下一步机器人状态
hit_spider/hexapod_Base_Pose base_Pose_Next
int8[6] support_State_Next
int8[6] faultLeg_State_Next
hit_spider/FeetPosition feetPositionNext

#移动方向
geometry_msgs/Point move_Direction

std_msgs/String remarks
================================================================================
MSG: hit_spider/hexapod_Base_Pose
geometry_msgs/Point position
hit_spider/hexapod_RPY orientation
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: hit_spider/hexapod_RPY
float64 roll
float64 pitch
float64 yaw
================================================================================
MSG: hit_spider/FeetPosition
geometry_msgs/Point[6] foot
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['base_Pose_Now','support_State_Now','faultLeg_State_Now','feetPositionNow','base_Pose_Next','support_State_Next','faultLeg_State_Next','feetPositionNext','move_Direction','remarks']
  _slot_types = ['hit_spider/hexapod_Base_Pose','int8[6]','int8[6]','hit_spider/FeetPosition','hit_spider/hexapod_Base_Pose','int8[6]','int8[6]','hit_spider/FeetPosition','geometry_msgs/Point','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base_Pose_Now,support_State_Now,faultLeg_State_Now,feetPositionNow,base_Pose_Next,support_State_Next,faultLeg_State_Next,feetPositionNext,move_Direction,remarks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hexapod_State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.base_Pose_Now is None:
        self.base_Pose_Now = hit_spider.msg.hexapod_Base_Pose()
      if self.support_State_Now is None:
        self.support_State_Now = [0] * 6
      if self.faultLeg_State_Now is None:
        self.faultLeg_State_Now = [0] * 6
      if self.feetPositionNow is None:
        self.feetPositionNow = hit_spider.msg.FeetPosition()
      if self.base_Pose_Next is None:
        self.base_Pose_Next = hit_spider.msg.hexapod_Base_Pose()
      if self.support_State_Next is None:
        self.support_State_Next = [0] * 6
      if self.faultLeg_State_Next is None:
        self.faultLeg_State_Next = [0] * 6
      if self.feetPositionNext is None:
        self.feetPositionNext = hit_spider.msg.FeetPosition()
      if self.move_Direction is None:
        self.move_Direction = geometry_msgs.msg.Point()
      if self.remarks is None:
        self.remarks = std_msgs.msg.String()
    else:
      self.base_Pose_Now = hit_spider.msg.hexapod_Base_Pose()
      self.support_State_Now = [0] * 6
      self.faultLeg_State_Now = [0] * 6
      self.feetPositionNow = hit_spider.msg.FeetPosition()
      self.base_Pose_Next = hit_spider.msg.hexapod_Base_Pose()
      self.support_State_Next = [0] * 6
      self.faultLeg_State_Next = [0] * 6
      self.feetPositionNext = hit_spider.msg.FeetPosition()
      self.move_Direction = geometry_msgs.msg.Point()
      self.remarks = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.base_Pose_Now.position.x, _x.base_Pose_Now.position.y, _x.base_Pose_Now.position.z, _x.base_Pose_Now.orientation.roll, _x.base_Pose_Now.orientation.pitch, _x.base_Pose_Now.orientation.yaw))
      buff.write(_get_struct_6b().pack(*self.support_State_Now))
      buff.write(_get_struct_6b().pack(*self.faultLeg_State_Now))
      if len(self.feetPositionNow.foot) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.feetPositionNow.foot), 'self.feetPositionNow.foot')))
      for val1 in self.feetPositionNow.foot:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_6d().pack(_x.base_Pose_Next.position.x, _x.base_Pose_Next.position.y, _x.base_Pose_Next.position.z, _x.base_Pose_Next.orientation.roll, _x.base_Pose_Next.orientation.pitch, _x.base_Pose_Next.orientation.yaw))
      buff.write(_get_struct_6b().pack(*self.support_State_Next))
      buff.write(_get_struct_6b().pack(*self.faultLeg_State_Next))
      if len(self.feetPositionNext.foot) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.feetPositionNext.foot), 'self.feetPositionNext.foot')))
      for val1 in self.feetPositionNext.foot:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3d().pack(_x.move_Direction.x, _x.move_Direction.y, _x.move_Direction.z))
      _x = self.remarks.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.base_Pose_Now is None:
        self.base_Pose_Now = hit_spider.msg.hexapod_Base_Pose()
      if self.feetPositionNow is None:
        self.feetPositionNow = hit_spider.msg.FeetPosition()
      if self.base_Pose_Next is None:
        self.base_Pose_Next = hit_spider.msg.hexapod_Base_Pose()
      if self.feetPositionNext is None:
        self.feetPositionNext = hit_spider.msg.FeetPosition()
      if self.move_Direction is None:
        self.move_Direction = geometry_msgs.msg.Point()
      if self.remarks is None:
        self.remarks = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.base_Pose_Now.position.x, _x.base_Pose_Now.position.y, _x.base_Pose_Now.position.z, _x.base_Pose_Now.orientation.roll, _x.base_Pose_Now.orientation.pitch, _x.base_Pose_Now.orientation.yaw,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 6
      self.support_State_Now = _get_struct_6b().unpack(str[start:end])
      start = end
      end += 6
      self.faultLeg_State_Now = _get_struct_6b().unpack(str[start:end])
      self.feetPositionNow.foot = []
      for i in range(0, 6):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.feetPositionNow.foot.append(val1)
      _x = self
      start = end
      end += 48
      (_x.base_Pose_Next.position.x, _x.base_Pose_Next.position.y, _x.base_Pose_Next.position.z, _x.base_Pose_Next.orientation.roll, _x.base_Pose_Next.orientation.pitch, _x.base_Pose_Next.orientation.yaw,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 6
      self.support_State_Next = _get_struct_6b().unpack(str[start:end])
      start = end
      end += 6
      self.faultLeg_State_Next = _get_struct_6b().unpack(str[start:end])
      self.feetPositionNext.foot = []
      for i in range(0, 6):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.feetPositionNext.foot.append(val1)
      _x = self
      start = end
      end += 24
      (_x.move_Direction.x, _x.move_Direction.y, _x.move_Direction.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remarks.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.remarks.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.base_Pose_Now.position.x, _x.base_Pose_Now.position.y, _x.base_Pose_Now.position.z, _x.base_Pose_Now.orientation.roll, _x.base_Pose_Now.orientation.pitch, _x.base_Pose_Now.orientation.yaw))
      buff.write(self.support_State_Now.tostring())
      buff.write(self.faultLeg_State_Now.tostring())
      if len(self.feetPositionNow.foot) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.feetPositionNow.foot), 'self.feetPositionNow.foot')))
      for val1 in self.feetPositionNow.foot:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_6d().pack(_x.base_Pose_Next.position.x, _x.base_Pose_Next.position.y, _x.base_Pose_Next.position.z, _x.base_Pose_Next.orientation.roll, _x.base_Pose_Next.orientation.pitch, _x.base_Pose_Next.orientation.yaw))
      buff.write(self.support_State_Next.tostring())
      buff.write(self.faultLeg_State_Next.tostring())
      if len(self.feetPositionNext.foot) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.feetPositionNext.foot), 'self.feetPositionNext.foot')))
      for val1 in self.feetPositionNext.foot:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3d().pack(_x.move_Direction.x, _x.move_Direction.y, _x.move_Direction.z))
      _x = self.remarks.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.base_Pose_Now is None:
        self.base_Pose_Now = hit_spider.msg.hexapod_Base_Pose()
      if self.feetPositionNow is None:
        self.feetPositionNow = hit_spider.msg.FeetPosition()
      if self.base_Pose_Next is None:
        self.base_Pose_Next = hit_spider.msg.hexapod_Base_Pose()
      if self.feetPositionNext is None:
        self.feetPositionNext = hit_spider.msg.FeetPosition()
      if self.move_Direction is None:
        self.move_Direction = geometry_msgs.msg.Point()
      if self.remarks is None:
        self.remarks = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.base_Pose_Now.position.x, _x.base_Pose_Now.position.y, _x.base_Pose_Now.position.z, _x.base_Pose_Now.orientation.roll, _x.base_Pose_Now.orientation.pitch, _x.base_Pose_Now.orientation.yaw,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 6
      self.support_State_Now = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=6)
      start = end
      end += 6
      self.faultLeg_State_Now = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=6)
      self.feetPositionNow.foot = []
      for i in range(0, 6):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.feetPositionNow.foot.append(val1)
      _x = self
      start = end
      end += 48
      (_x.base_Pose_Next.position.x, _x.base_Pose_Next.position.y, _x.base_Pose_Next.position.z, _x.base_Pose_Next.orientation.roll, _x.base_Pose_Next.orientation.pitch, _x.base_Pose_Next.orientation.yaw,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 6
      self.support_State_Next = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=6)
      start = end
      end += 6
      self.faultLeg_State_Next = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=6)
      self.feetPositionNext.foot = []
      for i in range(0, 6):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.feetPositionNext.foot.append(val1)
      _x = self
      start = end
      end += 24
      (_x.move_Direction.x, _x.move_Direction.y, _x.move_Direction.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remarks.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.remarks.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6b = None
def _get_struct_6b():
    global _struct_6b
    if _struct_6b is None:
        _struct_6b = struct.Struct("<6b")
    return _struct_6b
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
